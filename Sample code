"""
Prereqs:
pip install openai pandas
export OPENAI_API_KEY='sk-‚Ä¶'
"""

import os
import time
import pandas as pd
import openai
from tqdm import tqdm

# 1Ô∏è‚É£  Example data -----------------------------------------------------------
# Feel free to replace with df = pd.read_csv('your_file.csv')
df = pd.DataFrame(
    {
        "comment": [
            "The app keeps crashing after the new update.",
            "Fantastic customer service‚Äîmy issue was fixed in minutes.",
            "Not worth the price.",
            "Loved the new features!"
        ],
        "true_rating": [1, 5, 2, 5]      # ground truth labels (1‚Äì5 stars)
    }
)

# 2Ô∏è‚É£  Configure your fine-tuned model ----------------------------------------
MODEL_NAME = "ft:gpt-3.5-turbo:your-org::<job-id>"
TEMPERATURE = 0        # üîí keep it deterministic
MAX_TOKENS  = 1        # model should answer with just the rating

# 3Ô∏è‚É£  Helper for one call -----------------------------------------------------
def get_rating_from_gpt(comment: str, retries: int = 3) -> int:
    """
    Ask the fine-tuned model for a rating (1‚Äì5).
    Retries on transient errors / rate limits.
    """
    prompt = f"Rate the following comment from 1 (worst) to 5 (best). Respond with ONLY the number.\n\nComment: \"{comment}\""
    for attempt in range(retries):
        try:
            response = openai.ChatCompletion.create(
                model=MODEL_NAME,
                messages=[{"role": "user", "content": prompt}],
                temperature=TEMPERATURE,
                max_tokens=MAX_TOKENS,
            )
            rating_text = response.choices[0].message.content.strip()
            return int(rating_text)
        except Exception as e:
            if attempt < retries - 1:
                time.sleep(2 ** attempt)  # simple exponential back-off
            else:
                raise e

# 4Ô∏è‚É£  Generate ratings --------------------------------------------------------
gpt_ratings = []
for comment in tqdm(df["comment"], desc="Rating"):
    gpt_ratings.append(get_rating_from_gpt(comment))

df["gpt_rating"] = gpt_ratings

# 5Ô∏è‚É£  Evaluate accuracy -------------------------------------------------------
accuracy = (df["gpt_rating"] == df["true_rating"]).mean()
print(f"\nOverall accuracy: {accuracy:.2%}")

# Extra (optional) ‚Äì confusion matrix / classification report
try:
    from sklearn.metrics import classification_report, confusion_matrix
    print("\nClassification report:")
    print(classification_report(df["true_rating"], df["gpt_rating"]))
    print("Confusion matrix:")
    print(confusion_matrix(df["true_rating"], df["gpt_rating"]))
except ImportError:
    print("Install scikit-learn if you‚Äôd like a full report: pip install scikit-learn")

# 6Ô∏è‚É£  Save merged results -----------------------------------------------------
df.to_csv("comments_with_gpt_ratings.csv", index=False)
print("\nSaved ‚Üí comments_with_gpt_ratings.csv")
